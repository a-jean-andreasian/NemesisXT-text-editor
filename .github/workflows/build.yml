name: Manual PyInstaller Build

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  DEFAULT_PYTHON_VERSION: 3.13.3
  DEFAULT_APP_VERSION: 1.0.1


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ] #, macos-latest]

    outputs:
      PYTHON_VERSION: ${{ steps.read_py.outputs.version }}
      APP_VERSION: ${{ steps.get_app_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Python version
        id: read_py
        shell: bash
        run: |
          if [ -f meta/.python-version ] && [ -s meta/.python-version ]; then
            PY=$(cat meta/.python-version | tr -d '\r')
            echo "Using PY from file: $PY"
          else
            PY="${DEFAULT_PYTHON_VERSION}"
            echo "WARNING: meta/.python-version missing or empty. Using fallback: $PY"
          fi
          echo "version=$PY" >> $GITHUB_OUTPUT

      - name: Read app version
        if: matrix.os == 'ubuntu-latest'
        id: get_app_version
        shell: bash
        run: |
          if [ -f meta/.app_version ] && [ -s meta/.app_version ]; then
            APP_VERSION=$(cat meta/.app_version | tr -d '\r')
            echo "Using APP_VERSION from file: $APP_VERSION"
          else
            APP_VERSION="${DEFAULT_APP_VERSION}"
            echo "WARNING: meta/.app_version missing or empty. Using fallback: $APP_VERSION"
          fi
          echo "version=$APP_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.read_py.outputs.version }}


      - name: Install dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r meta/requirements-build.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon="src/assets/logos/window_logo.ico" "app.py"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gui-app-${{ matrix.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloads

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build.outputs.APP_VERSION }}
          name: "Nemesis-XT - Text Editor v${{ needs.build.outputs.APP_VERSION }}"
          body_path: .github/README.md
          files: downloads/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete tag if release failed
        if: failure()
        run: |
          echo "Cleaning up tag v${{ needs.build.outputs.APP_VERSION }} due to failure..."
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git clone --depth 1 https://github.com/${{ github.repository }} repo
          cd repo
          git push origin :refs/tags/v${{ needs.build.outputs.APP_VERSION }}
