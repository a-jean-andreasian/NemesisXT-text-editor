name: Manual PyInstaller Build

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] #, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Python version from .python-version
        run: echo "PY=$(cat meta/.python-version)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY }}

      - name: Install dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r meta/requirements-build.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon="src/assets/logos/window_logo.ico" "app.py"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gui-app-${{ matrix.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code  # This must be the FIRST step
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloads

      - name: Read app version
        id: version
        run: |
          echo "::group::Check meta/VERSION"
          ls -l meta || true
          cat meta/VERSION || echo "meta/VERSION missing"
          echo "::endgroup::"
          
          VERSION=$(cat meta/VERSION)
          if [ -z "$VERSION" ]; then
            echo "VERSION file is empty or unreadable"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: "Nemesis-XT - Text Editor v${{ env.VERSION }}"
          body_path: .github/README.md
          files: downloads/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete tag if release failed to avoid further failures due to "tag already exists"
        if: failure()
        run: |
          echo "Cleaning up tag v${{ env.VERSION }} due to failure..."
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git clone --depth 1 https://github.com/${{ github.repository }} repo
          cd repo
          git push origin :refs/tags/v${{ env.VERSION }}
